## curl -sL https://raw.githubusercontent.com/Kong/docker-kong/master/compose/docker-compose.yml > docker-compose.yml.ori

version: '3.7'

volumes:
  kong_data: {}

networks:
  kong-net:
    external: false

services:
  kong-migrations:
    image: "local/docker-kong-oidc:2.8.1"
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: db
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong-migrations-up:
    image: "local/docker-kong-oidc:2.8.1"
    command: kong migrations up && kong migrations finish
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: db
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong:
    image: "local/docker-kong-oidc:2.8.1"
    user: "${KONG_USER:-kong}"
    depends_on:
      - db
    environment:
      - KONG_LOG_LEVEL=info
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_GUI_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_GUI_ERROR_LOG=/dev/stderr
      - KONG_PORTAL_API_ACCESS_LOG=/dev/stdout
      - KONG_PORTAL_API_ERROR_LOG=/dev/stderr
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ANONYMOUS_REPORTS=false
      - KONG_CLUSTER_LISTEN=off
      - 'KONG_LUA_PACKAGE_PATH=/opt/?.lua;/opt/?/init.lua;;'
      - KONG_NGINX_WORKER_PROCESSES=1
      - 'KONG_PLUGINS=bundled,oidc'
      - 'KONG_ADMIN_LISTEN=0.0.0.0:8001'
      - 'KONG_PROXY_LISTEN=0.0.0.0:8000, 0.0.0.0:8443 http2 ssl'
      - 'KONG_STATUS_LISTEN=0.0.0.0:8100'
      - KONG_NGINX_DAEMON=off
      # - 'KONG_X_SESSION_MEMCACHE_PORT=''1234'''
      - KONG_X_SESSION_COMPRESSOR=zlib
      - KONG_DATABASE=postgres
      - KONG_PG_DATABASE=${KONG_PG_DATABASE:-kong}
      - KONG_PG_HOST=db
      - KONG_PG_USER=${KONG_PG_USER:-kong}
      - KONG_PG_PASSWORD_FILE=/run/secrets/kong_postgres_password
      # - KONG_X_SESSION_STORAGE=memcache

    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    ports:
      - "8000:8000/tcp"
      - "127.0.0.1:8001:8001/tcp"
      - "8443:8443/tcp"
      - "127.0.0.1:8444:8444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  db:
    image: ${PG_DOCKER_IMAGE:-postgres:9.5}
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data

  konga-prepare:
    image: pantsel/konga
    container_name: konga-prepare
    command: "-c prepare -a postgres -u postgresql://kong:kong@db:5432/konga"
    networks:
      - kong-net
    restart: on-failure
    links:
      - db:db
    depends_on:
      - db
  konga:
    image: pantsel/konga
    container_name: konga
    restart: on-failure
    links:
      - db:db
    depends_on:
      - db
      - konga-prepare
    networks:
      - kong-net
    env_file:
      - .konga-docker-env
    ports:
      - "1337:1337"

secrets:
  kong_postgres_password:
    file: ./POSTGRES_PASSWORD